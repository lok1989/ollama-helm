@Component
public class ErrorFileSkipListener implements SkipListener<ExtendedTransaction, Object>, StepExecutionListener {

    private BufferedWriter writer;
    private String inputFileName;

    @Override
    public void beforeStep(StepExecution stepExecution) {
        inputFileName = stepExecution.getJobParameters().getString("inputFile");
        if (inputFileName != null) {
            String baseName = inputFileName.replaceFirst("\\.csv$", "");
            String errorFileName = baseName + "a.err";
            try {
                writer = new BufferedWriter(new FileWriter(errorFileName, true));
            } catch (IOException e) {
                throw new RuntimeException("Failed to open error file: " + errorFileName, e);
            }
        }
    }

    @Override
    public void onSkipInRead(Throwable t) {
        // Could log generic info here if needed
    }

    @Override
    public void onSkipInProcess(ExtendedTransaction item, Throwable t) {
        logSkip(item.getRequestId(), "process", t.getMessage());
    }

    @Override
    public void onSkipInWrite(Object item, Throwable t) {
        if (item instanceof ExtendedTransaction tx) {
            logSkip(tx.getRequestId(), "write", t.getMessage());
        }
    }

    private void logSkip(int requestId, String phase, String reason) {
        try {
            writer.write("Record ID " + requestId + " is skipped during " + phase + " due to: " + reason);
            writer.newLine();
            writer.flush();
        } catch (IOException e) {
            System.err.println("❌ Failed to write to error file: " + e.getMessage());
        }
    }

    @Override
    public ExitStatus afterStep(StepExecution stepExecution) {
        try {
            if (writer != null) writer.close();
        } catch (IOException e) {
            System.err.println("⚠️ Failed to close error file writer: " + e.getMessage());
        }
        return ExitStatus.COMPLETED;
    }
}
